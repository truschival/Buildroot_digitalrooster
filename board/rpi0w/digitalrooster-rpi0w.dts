// SPDX-License-Identifier: GPL-2.0+

/dts-v1/;
#include "bcm2835.dtsi"
#include "bcm2835-rpi.dtsi"
#include "bcm283x-rpi-usb-otg.dtsi"

#include <dt-bindings/input/input.h>

/ {
	compatible =
	"raspberrypi,model-zero-w",
	"brcm,bcm2835",
	"digitalrooster,3.0";
	model = "Raspberry Pi Zero W";

	memory@0 {
		device_type = "memory";
		reg = <0 0x20000000>;
	};

	/* uart1 is the serial console used during boot on gpio 14,15 */
	aliases {
		serial0 = &uart0;
		serial1 = &uart1;
	};

	chosen {
		/* 8250 auxiliary UART instead of pl011 */
		//stdout-path = "serial1:115200n8";
		/delete-property/ stdout-path;
		bootargs = "coherent_pool=1M 8250.nr_uarts=1";
	};

	leds {
		act {
			gpios = <&gpio 47 GPIO_ACTIVE_HIGH>;
		};
	};

	wifi_pwrseq: wifi-pwrseq {
		compatible = "mmc-pwrseq-simple";
		reset-gpios = <&gpio 41 GPIO_ACTIVE_LOW>;
	};
};

&gpio {
	audio_pins: audio_pins {
		/* PCM, LRCLK, DOUT, (DIN=GPIO20 not used, connector pin 39 */
		brcm,pins = <18 19 21>; /* Mk3 connector Pin 12,35,40 */
		brcm,function = <BCM2835_FSEL_ALT0>; /* BCM2835_FSEL_ALT0=4 */
	};

	apds_irq_pins {
		brcm,pins = <4>; /* GPIO 4 Mk3 connector Pin 7 */
		brcm,function = <BCM2835_FSEL_GPIO_IN>;
	};

	pitft_pins: pitft_pins {
		/* reset, Touch IRQ, dc-gpio */
		brcm,pins = <7 24 25>; /*  7=Pin 26, 24=Pin 18 25=Pin 22*/
		brcm,function = <
		BCM2835_FSEL_GPIO_OUT /* DC */
		BCM2835_FSEL_GPIO_IN  /* IRQ */
		BCM2835_FSEL_GPIO_OUT /* Reset */
		>;
	};

	rotary_pins: rotary_pins {
		brcm,pins = <6 20>; /* Mk3 connector Pin 31, Pin 38 */
		brcm,function = <BCM2835_FSEL_GPIO_IN
				 BCM2835_FSEL_GPIO_IN>;
		brcm,pull = <BCM2835_PUD_UP BCM2835_PUD_UP>; /* pull-up */
	};

	push_button_pins: push_button_pins {
		brcm,pins = <5>; /* Mk3 connector Pin 29 */
		brcm,function = <BCM2835_FSEL_GPIO_IN>; /* input */
		brcm,pull = <BCM2835_PUD_UP>; /* pull-up */
	};

	shutdown_n: shutdown_n {
		brcm,pins = <26>; /* Mk3: connector Pin 37 */
		brcm,function = <BCM2835_FSEL_GPIO_OUT>;
		brcm,pull = <BCM2835_PUD_UP>;
	};

	wl_on: wl-on {
		brcm,pins = <41>;
		brcm,function = <BCM2835_FSEL_GPIO_OUT>;
	};
};

&sdhci {
	#address-cells = <1>;
	#size-cells = <0>;
	pinctrl-names = "default";
	pinctrl-0 = <&emmc_gpio34     /* pins = <34 35 36 37 38 39> */
		     &gpclk2_gpio43>;
	bus-width = <4>;
	mmc-pwrseq = <&wifi_pwrseq>;
	non-removable;
	status = "okay";
	brcmf: wifi@1 {
		reg = <1>;
		compatible = "brcm,bcm4329-fmac";
		interrupt-parent =  <&gpio>;
	};
};

&sdhost {
	pinctrl-names = "default";
	pinctrl-0 = <&sdhost_gpio48>; /* pins <48 49 50 51 52 53> */
	non-removable;
	bus-width = <4>;
	status = "okay";
};

&spi {
	pinctrl-names = "default";
	pinctrl-0 = <&spi0_gpio7>; /* pins = <7 8 9 10 11>; */
	/*
	 * the SPI CS1 (gpio7) is wired to the reset line of PiTFT hence we
	 * cannot use it as second chip select
	 */
	cs-gpios = <&gpio 8 1>; /*, <&gpio 7 1>; */
	status = "okay";

	spidev0: spidev@0{
		compatible = "spidev";
		reg = <0>;	/* CE0 */
		#address-cells = <1>;
		#size-cells = <0>;
		spi-max-frequency = <125000000>;
		/* No user-space SPI dev, we don't have CS left */
		status = "disabled";
	};

	/* TINY DRM on Adafruit 2.8" TFT */
	pitft: pitft@0{
		compatible ="adafruit,yx240qv29", "ilitek,ili9341";
		status = "okay";
		/* common for tinydrm and framebuffer */
		reg = <0>;
		spi-max-frequency = <32000000>;
		rotation = <90>; /* Rotation for tinydrm driver */
		/* backlight = <&pwm_18_backlight>/* backlight tinydrm driver */
		/* GPIO assignments for tinydrm driver */
		dc-gpios = <&gpio 25 GPIO_ACTIVE_HIGH>;	 /* GPIO 25 Pin22   */
		/*
		 * Tinydrm driver needs a reset line. The display itself can
		 * do without. If you need a second CS you can use another
		 * GPIO here e.g. gpio 16
		 */
		reset-gpios = <&gpio 7 GPIO_ACTIVE_HIGH>; /* GPIO 7, Pin 26 */
		/* Properties of Framebuffer driver */
		/* rotate = <270>; */
		/* fps = <25>; */
		/* bgr; */
		/* buswidth = <8>; */
		/* debug = <1>; */
		/* pinctrl-0 = <&pitft_pins>; */
	};
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_gpio2>; /* pin <2 3> */
	clock-frequency = <100000>;
	status = "okay";

	/* APDS 9960 light, color, proximity sensor */
	apds9960: adps@39 {
		compatible = "avago,apds9960";
		reg = <0x39>;
		interrupt-parent = <&gpio>;
		/* GPIO 4 edge l->h (RISING=2) */
		interrupts = <4 IRQ_TYPE_EDGE_RISING>;
	};

	/* LED driver actually a TLC59208F but seems compatible */
	tlc59208f: tlc59208f@48 {
		compatible = "ti,tlc59108";
		reg = <0x20>; /* should be 0x42 */
		/* red */
		r@2 {
			label = "RGB:r";
			reg = <0x00>; /* mapped to i2c register 0x02 */
		};
		/* green */
		g@3 {
			label = "RGB:g";
			reg = <0x01>;
		};
		/* blue */
		b@4 {
			label = "RGB:b";
			reg = <0x02>;
		};
		/* amber */
		a@5 {
			label = "RGB:a";
			reg = <0x03>;
			/* linux,default-trigger = "activity"; */
		};
		/* backlight */
		bl@6{
			label = "bl";
			reg = <0x04>;
			/* linux,default-trigger = "backlight"; */
		};
	};

	/* I2C Touch controller */
	ft6236: ft6236@38 {
		compatible = "focaltech,ft6236";
		reg = <0x38>;
		interrupt-parent = <&gpio>;
		/* Mk3 connector Pin 18, touch irq (FALLING=2) */
		interrupts = <24 IRQ_TYPE_EDGE_FALLING>;
		touchscreen-size-x = <240>;
		touchscreen-size-y = <320>;
	};

	/* Real time clock */
	bq32k: rtc@68 {
		compatible = "ti,bq32000";
		reg = <0x68>;
		trickle-resistor-ohms = <1120>;
		/* trickle-diode-disable; */
	};
};

&i2s {
	#sound-dai-cells = <0>;
	pinctrl-names = "default";
	pinctrl-0 = <&audio_pins>;
	status = "okay";
};

/ {
	/* Pushbutton of Grayhill rotary encoder */
	gpiokeys: gpiokeys {
		label = "gpio-keys";
		compatible = "gpio-keys";
		OnOff {
			label = "OnOff";
			linux,code = <KEY_HOME>;
			gpios = <&gpio 5 GPIO_ACTIVE_HIGH>; /* Mk3a pin 29 */
		};
	};

	/* Grayhill Rotary encoder for volume */
	rotary_abs: rotary_abs {
		compatible = "rotary-encoder";
		label = "rotary-enc";
		status = "okay";
		pinctrl-names = "default";
		pinctrl-0 = <&rotary_pins>;
		gpios = <&gpio	6 GPIO_ACTIVE_HIGH>, /* Mk3 connector pin 31 */
			<&gpio 20 GPIO_ACTIVE_HIGH>; /* Mk3 connector pin 38 */
		linux,axis = <0>; /* REL_X */
		rotary-encoder,encoding = "gray";
		rotary-encoder,relative-axis;
		rotary-encoder,steps = <32>; /* 24 default */
		rotary-encoder,steps-per-period = <4>;
	};

	/* MAX98357A Codec */
	max98357a: max98357a0 {
		#sound-dai-cells = <0>;
		compatible = "maxim,max98357a";
		status = "okay";
		pinctrl-0 = <&shutdown_n>;
		/* GPIO 26 Pin 37 */
		sdmode-gpios = <&gpio 26 GPIO_ACTIVE_HIGH>; /* Mk3 pin 37*/
		sdmode-delay = <5>; /* deassert shutdown after 5ms */
	};

	/* default sound card */
	sound {
		compatible = "simple-audio-card";
		simple-audio-card,name = "snd-i2s-default";
		simple-audio-card,format = "i2s";
		/* simple-audio-card,bitclock-master = <&dai>; */
		/* simple-audio-card,frame-master = <&dai_cpu>; */
		simple-audio-card,mclk-fs  = <256>;
		status = "okay";

		dai_cpu: simple-audio-card,cpu {
			sound-dai = <&i2s>;
		};

		dai_codec: simple-audio-card,codec {
			sound-dai = <&max98357a>;
		};
	};
};

&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_gpio32 &uart0_ctsrts_gpio30>;
	status = "okay";

	bluetooth {
		compatible = "brcm,bcm43438-bt";
		max-speed = <2000000>;
		shutdown-gpios = <&gpio 45 GPIO_ACTIVE_HIGH>;
	};
};

&uart1 {
	/* primary UART for boot console */
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_gpio14>; /* pins = <14 15> */
	status = "okay";
};
